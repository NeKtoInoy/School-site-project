// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
const gameData = {
    xp: 0,
    level: 1,
    rank: "–°—Ç–∞–∂–µ—Ä",
    quests: {
        '1.1': { completed: false, xp: 10, unlocked: true },
        '1.2': { completed: false, xp: 15, unlocked: true },
        '2.1': { completed: false, xp: 15, unlocked: false },
        '2.2': { completed: false, xp: 10, unlocked: false },
        '3.1': { completed: false, xp: 15, unlocked: false },
        '3.2': { completed: false, xp: 15, unlocked: false }
    }
};

// –£—Ä–æ–≤–Ω–∏ –∏ –∑–≤–∞–Ω–∏—è
const levels = [
    { level: 1, xpNeeded: 0, rank: "–°—Ç–∞–∂–µ—Ä" },
    { level: 2, xpNeeded: 25, rank: "–°–µ—Ç–µ–≤–æ–π –¥–µ—Ç–µ–∫—Ç–∏–≤" },
    { level: 3, xpNeeded: 50, rank: "–§–∞–π–ª–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä" }
];

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievements = {
    firstQuest: { name: "–ü–µ—Ä–≤—ã–π —à–∞–≥", desc: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç", unlocked: false },
    networkMaster: { name: "–°–µ—Ç–µ–≤–æ–π –º–∞—Å—Ç–µ—Ä", desc: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∫–≤–µ—Å—Ç—ã", unlocked: false },
    fileMaster: { name: "–§–∞–π–ª–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä", desc: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∫–≤–µ—Å—Ç—ã –ø–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ", unlocked: false },
    allQuests: { name: "–í–µ–ª–∏–∫–∏–π —Å–∏—Å–∞–¥–º–∏–Ω", desc: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∫–≤–µ—Å—Ç—ã", unlocked: false }
};

// –¢–µ–∫—É—â–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å
let currentLevel = 1;

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP –¥–ª—è ALT Linux
function checkIP(questId) {
    const ipInput = document.getElementById(`ip-input-${questId}`);
    const validationResult = document.getElementById(`validation-${questId}`);
    const ip = ipInput.value.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –≤ —Å–µ—Ç–∏ 10.0.2.0/24
    const ipRegex = /^10\.0\.2\.(\d{1,3})$/;
    const match = ip.match(ipRegex);
    
    if (match) {
        const lastOctet = parseInt(match[1]);
        if (lastOctet >= 1 && lastOctet <= 254) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π IP
            validationResult.innerHTML = '<span style="color: #48bb78;">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ IP –∏–∑ —Å–µ—Ç–∏ 10.0.2.0/24</span>';
            ipInput.style.borderColor = '#48bb78';
            updateQuest(questId, true);
            showAchievement('üéØ –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—à–ª–∏ —Å–≤–æ–π IP –≤ ALT Linux!');
            return;
        }
    }
    
    // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP
    validationResult.innerHTML = '<span style="color: #e53e3e;">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–µ—Ç–∏ 10.0.2.0/24</span>';
    ipInput.style.borderColor = '#e53e3e';
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–ª—é–∑–∞ –¥–ª—è ALT Linux
function checkGateway(questId) {
    const ipInput = document.getElementById(`ip-input-${questId}`);
    const validationResult = document.getElementById(`validation-${questId}`);
    const ip = ipInput.value.trim();
    
    if (ip === '10.0.2.2') {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–ª—é–∑
        validationResult.innerHTML = '<span style="color: #48bb78;">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –®–ª—é–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤–µ—Ä–Ω–æ</span>';
        ipInput.style.borderColor = '#48bb78';
        updateQuest(questId, true);
        showAchievement('üåê –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—à–ª–∏ —à–ª—é–∑ –≤ ALT Linux!');
    } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–ª—é–∑
        validationResult.innerHTML = '<span style="color: #e53e3e;">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —à–ª—é–∑. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "ip route show" —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP</span>';
        ipInput.style.borderColor = '#e53e3e';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    loadProgress();
    updateUI();
    showSection('theory');
    updateAllQuestStatuses();
    updateMap();
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
function showSection(sectionName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.querySelectorAll('.game-section').forEach(section => {
        section.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    if (sectionName === 'theory') {
        document.getElementById('theory-section').classList.add('active');
        document.querySelector('.nav-btn[onclick="showSection(\'theory\')"]').classList.add('active');
    } else if (sectionName === 'map') {
        document.getElementById('map-section').classList.add('active');
        document.querySelector('.nav-btn[onclick="showSection(\'map\')"]').classList.add('active');
        updateMap();
    } else if (sectionName === 'quests') {
        document.getElementById('quests-section').classList.add('active');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
function showLevel(levelNumber) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å
    const levelNode = document.querySelector(`.level-node[data-level="${levelNumber}"]`);
    if (levelNode.classList.contains('locked')) {
        return;
    }
    
    currentLevel = levelNumber;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
    document.querySelectorAll('.quest-level').forEach(level => {
        level.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    document.getElementById(`level-${levelNumber}`).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–≤–Ω—è
    const levelTitles = {
        1: "–£—Ä–æ–≤–µ–Ω—å 1: –°—Ç–∞–∂–µ—Ä",
        2: "–£—Ä–æ–≤–µ–Ω—å 2: –°–µ—Ç–µ–≤–æ–π –¥–µ—Ç–µ–∫—Ç–∏–≤", 
        3: "–£—Ä–æ–≤–µ–Ω—å 3: –§–∞–π–ª–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä"
    };
    document.getElementById('current-level-title').textContent = levelTitles[levelNumber];
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–¥–µ–ª—É –∫–≤–µ—Å—Ç–æ–≤
    showSection('quests');
    updateLevelProgress();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —É—Ä–æ–≤–Ω–µ–π
function updateMap() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É–∑–ª–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
    document.querySelectorAll('.level-node').forEach(node => {
        const level = parseInt(node.getAttribute('data-level'));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
        node.classList.remove('active', 'completed', 'locked');
        
        if (level === 1) {
            // –£—Ä–æ–≤–µ–Ω—å 1 –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
            node.classList.add('active');
            node.querySelector('.node-status').textContent = '–î–æ—Å—Ç—É–ø–Ω–æ';
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å
            const prevLevelCompleted = isLevelCompleted(level - 1);
            
            if (prevLevelCompleted) {
                node.classList.add('active');
                node.querySelector('.node-status').textContent = '–î–æ—Å—Ç—É–ø–Ω–æ';
            } else {
                node.classList.add('locked');
                node.querySelector('.node-status').textContent = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å
        if (isLevelCompleted(level)) {
            node.classList.remove('active', 'locked');
            node.classList.add('completed');
            node.querySelector('.node-status').textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –∫–∞—Ä—Ç–µ
        updateLevelProgressOnMap(level);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
function isLevelCompleted(level) {
    const levelQuests = Object.keys(gameData.quests)
        .filter(questId => questId.startsWith(level + '.'));
    
    return levelQuests.every(questId => gameData.quests[questId].completed);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è –Ω–∞ –∫–∞—Ä—Ç–µ
function updateLevelProgressOnMap(level) {
    const levelQuests = Object.keys(gameData.quests)
        .filter(questId => questId.startsWith(level + '.'));
    
    const completedQuests = levelQuests.filter(questId => gameData.quests[questId].completed);
    const totalXP = levelQuests.reduce((sum, questId) => sum + gameData.quests[questId].xp, 0);
    const earnedXP = completedQuests.reduce((sum, questId) => sum + gameData.quests[questId].xp, 0);
    
    const progress = (earnedXP / totalXP) * 100;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressBar = document.getElementById(`map-progress-${level}`);
    if (progressBar) {
        progressBar.style.width = `${progress}%`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç XP
    const xpText = document.getElementById(`map-xp-${level}`);
    if (xpText) {
        xpText.textContent = `${earnedXP}/${totalXP} XP`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
function updateLevelProgress() {
    const levelQuests = Object.keys(gameData.quests)
        .filter(questId => questId.startsWith(currentLevel + '.'));
    
    const completedQuests = levelQuests.filter(questId => gameData.quests[questId].completed);
    const totalXP = levelQuests.reduce((sum, questId) => sum + gameData.quests[questId].xp, 0);
    const earnedXP = completedQuests.reduce((sum, questId) => sum + gameData.quests[questId].xp, 0);
    
    const progress = totalXP > 0 ? (earnedXP / totalXP) * 100 : 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressBar = document.getElementById('level-progress-fill');
    if (progressBar) {
        progressBar.style.width = `${progress}%`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressText = document.getElementById('level-progress-text');
    if (progressText) {
        progressText.textContent = `${Math.round(progress)}%`;
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–µ–æ—Ä–∏–∏
function nextTheory(nextId) {
    const currentCard = document.querySelector('.theory-card.active');
    const nextCard = document.getElementById(`theory-${nextId}`);
    
    if (currentCard && nextCard) {
        currentCard.classList.remove('active');
        nextCard.classList.add('active');
    }
}

function prevTheory(prevId) {
    const currentCard = document.querySelector('.theory-card.active');
    const prevCard = document.getElementById(`theory-${prevId}`);
    
    if (currentCard && prevCard) {
        currentCard.classList.remove('active');
        prevCard.classList.add('active');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
function updateQuest(questId, completed) {
    if (gameData.quests[questId] && gameData.quests[questId].unlocked) {
        gameData.quests[questId].completed = completed;
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º XP
        calculateXP();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateQuestStatus(questId);
        updateUI();
        checkLevelUnlocks();
        checkAchievements();
        saveProgress();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è
        updateLevelProgress();
        updateMap();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—á–∏–≤–∫—É, –µ—Å–ª–∏ –∫–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        if (completed) {
            showAchievement(`–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! +${gameData.quests[questId].xp} XP`);
        }
    }
}

// –†–∞—Å—á–µ—Ç XP
function calculateXP() {
    let totalXP = 0;
    
    // –°—á–∏—Ç–∞–µ–º XP –∑–∞ –∫–≤–µ—Å—Ç—ã
    Object.values(gameData.quests).forEach(quest => {
        if (quest.completed && quest.unlocked) {
            totalXP += quest.xp;
        }
    });
    
    gameData.xp = totalXP;
    updateLevel();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
function updateLevel() {
    let newLevel = 1;
    let newRank = "–°—Ç–∞–∂–µ—Ä";
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ XP
    for (let i = levels.length - 1; i >= 0; i--) {
        if (gameData.xp >= levels[i].xpNeeded) {
            newLevel = levels[i].level;
            newRank = levels[i].rank;
            break;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —É—Ä–æ–≤–µ–Ω—å
    if (newLevel !== gameData.level) {
        gameData.level = newLevel;
        gameData.rank = newRank;
        showAchievement(`–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! ${newLevel} - ${newRank}`);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–≤–Ω–µ–π
function checkLevelUnlocks() {
    // –£—Ä–æ–≤–µ–Ω—å 2 —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ 25 XP
    if (gameData.xp >= 25) {
        unlockQuests(['2.1', '2.2']);
    }
    
    // –£—Ä–æ–≤–µ–Ω—å 3 —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ 50 XP
    if (gameData.xp >= 50) {
        unlockQuests(['3.1', '3.2']);
    }
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–≤–µ—Å—Ç–æ–≤
function unlockQuests(questIds) {
    questIds.forEach(questId => {
        if (gameData.quests[questId]) {
            gameData.quests[questId].unlocked = true;
            updateQuestStatus(questId);
            
            // –í–∫–ª—é—á–∞–µ–º input –∏ button –¥–ª—è IP-–∫–≤–µ—Å—Ç–æ–≤
            if (questId === '2.1') {
                const ipInput = document.getElementById(`ip-input-${questId}`);
                const checkButton = document.getElementById(`check-btn-${questId}`);
                if (ipInput) ipInput.disabled = false;
                if (checkButton) checkButton.disabled = false;
            }
            
            // –í–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
            const questCard = document.querySelector(`[data-quest="${questId}"]`);
            const checkbox = questCard?.querySelector('input[type="checkbox"]');
            if (checkbox) {
                checkbox.disabled = false;
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–≤–µ—Å—Ç–∞
function updateQuestStatus(questId) {
    const statusElement = document.getElementById(`status-${questId}`);
    const quest = gameData.quests[questId];
    
    if (statusElement && quest) {
        if (!quest.unlocked) {
            statusElement.textContent = 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ';
            statusElement.className = 'quest-status status-locked';
        } else if (quest.completed) {
            statusElement.textContent = 'üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ';
            statusElement.className = 'quest-status status-completed';
        } else {
            statusElement.textContent = 'üü° –ù–µ –Ω–∞—á–∞—Ç–æ';
            statusElement.className = 'quest-status status-in-progress';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–≤–µ—Å—Ç–æ–≤
function updateAllQuestStatuses() {
    Object.keys(gameData.quests).forEach(questId => {
        updateQuestStatus(questId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        const questCard = document.querySelector(`[data-quest="${questId}"]`);
        const checkbox = questCard?.querySelector('input[type="checkbox"]');
        const quest = gameData.quests[questId];
        
        if (checkbox) {
            checkbox.checked = quest.completed;
            checkbox.disabled = !quest.unlocked;
        }
    });
}

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
function copyCommand(element) {
    const command = element.textContent;
    navigator.clipboard.writeText(command).then(() => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        const originalBg = element.style.backgroundColor;
        const originalText = element.textContent;
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫
        element.style.backgroundColor = '#48bb78';
        element.style.color = 'white';
        element.textContent = '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        
        setTimeout(() => {
            element.style.backgroundColor = originalBg;
            element.style.color = '';
            element.textContent = originalText;
        }, 1500);
    }).catch(err => {
        console.log('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        element.style.backgroundColor = '#e53e3e';
        element.textContent = '‚ùå –û—à–∏–±–∫–∞';
        setTimeout(() => {
            element.style.backgroundColor = '#edf2f7';
            element.textContent = command;
        }, 1500);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    // –ü–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç
    if (gameData.quests['1.1'].completed && !achievements.firstQuest.unlocked) {
        achievements.firstQuest.unlocked = true;
        showAchievement(`üèÜ ${achievements.firstQuest.name}: ${achievements.firstQuest.desc}`);
    }
    
    // –°–µ—Ç–µ–≤–æ–π –º–∞—Å—Ç–µ—Ä
    const networkQuests = ['1.1', '1.2', '2.1', '2.2'];
    if (networkQuests.every(questId => gameData.quests[questId].completed) && !achievements.networkMaster.unlocked) {
        achievements.networkMaster.unlocked = true;
        showAchievement(`üèÜ ${achievements.networkMaster.name}: ${achievements.networkMaster.desc}`);
    }
    
    // –§–∞–π–ª–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä
    const fileQuests = ['3.1', '3.2'];
    if (fileQuests.every(questId => gameData.quests[questId].completed) && !achievements.fileMaster.unlocked) {
        achievements.fileMaster.unlocked = true;
        showAchievement(`üèÜ ${achievements.fileMaster.name}: ${achievements.fileMaster.desc}`);
    }
    
    // –í—Å–µ –∫–≤–µ—Å—Ç—ã
    const allQuestIds = Object.keys(gameData.quests);
    if (allQuestIds.every(questId => gameData.quests[questId].completed) && !achievements.allQuests.unlocked) {
        achievements.allQuests.unlocked = true;
        showAchievement(`üèÜ ${achievements.allQuests.name}: ${achievements.allQuests.desc}`);
    }
}

// –ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function showAchievement(text) {
    const modal = document.getElementById('achievement-modal');
    const title = document.getElementById('achievement-title');
    const achievementText = document.getElementById('achievement-text');
    
    achievementText.textContent = text;
    modal.style.display = 'block';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (modal.style.display === 'block') {
            closeModal();
        }
    }, 4000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    const modal = document.getElementById('achievement-modal');
    modal.style.display = 'none';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º XP –∏ —É—Ä–æ–≤–µ–Ω—å
    document.getElementById('xp').textContent = gameData.xp;
    document.getElementById('level').textContent = gameData.level;
    document.getElementById('rank').textContent = gameData.rank;
    
    // –ù–∞—Ö–æ–¥–∏–º XP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const nextLevel = levels.find(level => level.level === gameData.level + 1);
    const xpNeeded = nextLevel ? nextLevel.xpNeeded : levels[levels.length - 1].xpNeeded;
    document.getElementById('xp-needed').textContent = xpNeeded;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const currentLevelData = levels.find(level => level.level === gameData.level);
    const nextLevelData = levels.find(level => level.level === gameData.level + 1);
    
    if (currentLevelData && nextLevelData) {
        const xpInLevel = gameData.xp - currentLevelData.xpNeeded;
        const xpForLevel = nextLevelData.xpNeeded - currentLevelData.xpNeeded;
        const progress = (xpInLevel / xpForLevel) * 100;
        document.getElementById('progress-fill').style.width = `${Math.min(progress, 100)}%`;
    } else {
        document.getElementById('progress-fill').style.width = '100%';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–≤–µ—Å—Ç–æ–≤
    updateAllQuestStatuses();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function saveProgress() {
    const saveData = {
        xp: gameData.xp,
        level: gameData.level,
        rank: gameData.rank,
        quests: gameData.quests,
        achievements: achievements
    };
    localStorage.setItem('sysadminGameProgress', JSON.stringify(saveData));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProgress() {
    const saved = localStorage.getItem('sysadminGameProgress');
    if (saved) {
        const saveData = JSON.parse(saved);
        gameData.xp = saveData.xp || 0;
        gameData.level = saveData.level || 1;
        gameData.rank = saveData.rank || "–°—Ç–∞–∂–µ—Ä";
        gameData.quests = saveData.quests || gameData.quests;
        
        if (saveData.achievements) {
            Object.keys(saveData.achievements).forEach(key => {
                if (achievements[key]) {
                    achievements[key].unlocked = saveData.achievements[key].unlocked;
                }
            });
        }
        
        checkLevelUnlocks();
    }
}

// –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function resetProgress() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?')) {
        localStorage.removeItem('sysadminGameProgress');
        location.reload();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initGame();
    
    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const resetBtn = document.createElement('button');
    resetBtn.textContent = 'üîÑ –°–±—Ä–æ—Å';
    resetBtn.style.position = 'fixed';
    resetBtn.style.top = '10px';
    resetBtn.style.right = '10px';
    resetBtn.style.zIndex = '1000';
    resetBtn.style.background = '#e53e3e';
    resetBtn.style.color = 'white';
    resetBtn.style.border = 'none';
    resetBtn.style.padding = '5px 10px';
    resetBtn.style.borderRadius = '5px';
    resetBtn.style.cursor = 'pointer';
    resetBtn.onclick = resetProgress;
    document.body.appendChild(resetBtn);
});